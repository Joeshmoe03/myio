Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 

/*myio.c*/
#include <stdio.h>
#include <fcntl.h>
#include <sys/stat.h>
#include "myio.h"
#include <stdlib.h>

#define BUFFER_SIZE 4096

//myopen returns struct
//myread(FILE, *buf, count)

//close call flush
//write call flush?

MYFILE *myopen(const char* path, int flags) { 
	int filedesc;
    
	/* MYFILE is a struct that we made in myio.h: contains relevant info to our file and corresponding buffer */
	MYFILE *filep = malloc(sizeof(MYFILE));
	
	//TODO: HANDLE OUR FLAGS //

	
	/*** READING IS IMPORTANT!!!
	The argument flags must include one of the following access
    //    modes: O_RDONLY, O_WRONLY, or O_RDWR.  These request opening the
    //    file read-only, write-only, or read/write, respectively.

    //    In addition, zero or more file creation flags and file status
    //    flags can be bitwise-or'd in flags.  The file creation flags are
    //    O_CREAT, O_TRUNC  ***/


	// switch(flags) {
	// 	case O_CREAT:
	// 		filedesc = open(path, O_CREAT, 0666); //TODO
	// 		break;
	// 	case O_WRONLY:
	// 		filedesc = open(path, O_WRONLY); //TODO
	// 		break;
	// 	case O_RDONLY:
	// 		filedesc = open(path, O_RDONLY); //TODO
	// 		break;
	// 	case O_RDWR:
    //         //printf("INSIDE\n");
	// 		filedesc = open(path, O_RDWR); //TODO
	// 		break;
	// 	case O_TRUNC:
	// 		filedesc = open(path, O_TRUNC, 0666); //TODO
	// 		break;
	// 	default:
	// 		//printf("in default");
    //         perror("open");
	// 		break;


		//flags
			//include access modes

		
		// if O_RDONLY
		// 	open(1 | Rest of non-access mode flags)
		// if 2

		// if 3


		// if (no access modes are provided) {
		// 	fail
		// }

		
		



	
        // if (flags == O_CREAT || flags == O_TRUNC) {
        //     open(path, flags, 0666);
        // }

		//is this not enough, will give us error messages and stuff
        open(path, flags);
		
		void* filebuff = malloc(BUFFER_SIZE); //TODO: IS THIS CORRECT TYPE? SHOULD WE EVEN DO HERE?

		filep->filedesc = filedesc;
		filep->buff = filebuff;
		filep->buffsize = BUFFER_SIZE;
		filep->offset = 0;
		filep->useroffset = 0;
		//TODO: ANY OTHER STRUCT ELEMENTS?
	
	return filep;
}


/*
 * mytestmyio.c
 */

#include <stdio.h>
#include <fcntl.h>
#include <sys/syscall.h>
#include <unistd.h>
#include "myio.h"

int
main(int argc, char *argv[])
{
    //printf("%d\n", myopen("hello.txt", O_RDWR | O_RDONLY | O_WRONLY | O_CREAT | O_TRUNC));
    //perror("open");
    //printf("Worked?\n");
    
    
   // myopen("hello.txt", O_RDWR);
    MYFILE *f1 = myopen("hello.txt", O_RDWR);
    perror("open");

    char buf[4096];
    // char buf2[10240];

    printf("%d",f1->filedesc);
    // //read((f1->filedesc), buf, 4096);

    // // int try1 = open("hello.txt", O_RDWR);
    // // perror("open");

    // // read(try1, buf2, 10240);
    // // perror("read");

    // printf(buf);
    // printf(buf2);

}
